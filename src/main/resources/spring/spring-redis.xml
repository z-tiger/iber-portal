<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	
	
	<!-- redis池配置   -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
	<!-- 
		<property name="maxTotal" value="${redis.pool.maxTotal}" />  
	    <property name="maxIdle" value="${redis.pool.maxIdle}" />  
	    <property name="numTestsPerEvictionRun" value="1024"/>  
	    <property name="timeBetweenEvictionRunsMillis" value="30000" />  
	    <property name="minEvictableIdleTimeMillis" value="-1" />  
	    <property name="softMinEvictableIdleTimeMillis" value="10000" />  
	    <property name="maxWaitMillis" value="${redis.pool.maxWait}"/>  
	    <property name="testOnBorrow" value="true" />  
	    <property name="testWhileIdle" value="true"/>  
	    <property name="testOnReturn" value="false"/>  
	    <property name="blockWhenExhausted" value="false"/> 
	     -->
		
         <property name="maxIdle" value="${redis.maxIdle}" />
         <property name="maxActive" value="${redis.maxActive}" />   
         <property name="maxWait" value="${redis.maxWait}" />  
          
         <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
         
         <!-- 
         <property name="maxIdle"><value>${redis.maxIdle}</value></property>
         <property name="maxActive"><value>${redis.maxActive}</value></property>
         <property name="maxWait"><value>${redis.maxWait}</value></property>
         <property name="testOnBorrow"><value>${redis.testOnBorrow}</value></property>
          -->
    </bean>
    
    <!-- 定义分片式集群的连接池 -->
    <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
    	<constructor-arg index="0" ref="poolConfig" />
    	<constructor-arg index="1">
    		<list>
    			<bean class="redis.clients.jedis.JedisShardInfo">
    				<constructor-arg name="host" value="${redis.host}" />
    				
    				<constructor-arg name="port" value="${redis.node1.port}" />
    				<constructor-arg name="name" value="${redis.node1.name}" />
    				<!-- 
    				 <property name="connectionTimeout" value="${redis.timeout}"/>
                    <property name="soTimeout" value="${redis.timeout}"/>
                     -->
    			</bean>
    		</list>
    	</constructor-arg>
    </bean>
    
      <!-- 
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
         <property name="usePool" value="true" /> 
        <property name="hostName" value="${redis.host}" />
        <property name="port" value="${redis.port}" />
        <property name="password" value="${redis.password}" />
        <property name="poolConfig" ref="poolConfig" /> 
     </bean> 
      -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" 
    	p:usePool = "true"  
    	p:hostName="${redis.host}"  p:port="${redis.port}"  p:password="${redis.password}"
     	p:poolConfig-ref="poolConfig" />
      
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">  
        <property name="connectionFactory"   ref="connectionFactory" />  
    </bean>     

<!--    <bean id="token" class="com.iber.service.provider.base.Token"> 
      <property name="redisTemplate" ref="redisTemplate"/>
   </bean>
   
   <bean id="memberService-token" class="com.iber.service.provider.base.MemberServiceImpl">
      <property name="token" ref="token"/>
   </bean>-->
</beans>