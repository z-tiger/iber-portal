<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.iber.portal.dao.charging.ChargingPileTypeMapper" >
  <resultMap id="BaseResultMap" type="com.iber.portal.model.charging.ChargingPileType" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="brand_name" property="brandName" jdbcType="VARCHAR" />
    <result column="pile_type" property="pileType" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_id" property="createId" jdbcType="INTEGER" />
    <result column="update_create" property="updateCreate" jdbcType="TIMESTAMP" />
    <result column="update_id" property="updateId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, brand_name, pile_type, create_time, create_id, update_create, update_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from x_charging_pile_type
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from x_charging_pile_type
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.iber.portal.model.charging.ChargingPileType" >
    insert into x_charging_pile_type (id, brand_name, pile_type, 
      create_time, create_id, update_create, 
      update_id)
    values (#{id,jdbcType=INTEGER}, #{brandName,jdbcType=VARCHAR}, #{pileType,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{createId,jdbcType=INTEGER}, #{updateCreate,jdbcType=TIMESTAMP}, 
      #{updateId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.iber.portal.model.charging.ChargingPileType" >
    insert into x_charging_pile_type
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="brandName != null" >
        brand_name,
      </if>
      <if test="pileType != null" >
        pile_type,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="createId != null" >
        create_id,
      </if>
      <if test="updateCreate != null" >
        update_create,
      </if>
      <if test="updateId != null" >
        update_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="brandName != null" >
        #{brandName,jdbcType=VARCHAR},
      </if>
      <if test="pileType != null" >
        #{pileType,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createId != null" >
        #{createId,jdbcType=INTEGER},
      </if>
      <if test="updateCreate != null" >
        #{updateCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateId != null" >
        #{updateId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.iber.portal.model.charging.ChargingPileType" >
    update x_charging_pile_type
    <set >
      <if test="brandName != null" >
        brand_name = #{brandName,jdbcType=VARCHAR},
      </if>
      <if test="pileType != null" >
        pile_type = #{pileType,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createId != null" >
        create_id = #{createId,jdbcType=INTEGER},
      </if>
      <if test="updateCreate != null" >
        update_create = #{updateCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateId != null" >
        update_id = #{updateId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.iber.portal.model.charging.ChargingPileType" >
    update x_charging_pile_type
    set brand_name = #{brandName,jdbcType=VARCHAR},
      pile_type = #{pileType,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_id = #{createId,jdbcType=INTEGER},
      update_create = #{updateCreate,jdbcType=TIMESTAMP},
      update_id = #{updateId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="getAllNum" resultType="java.lang.Integer" parameterType="java.util.Map" >
     select count(1) from x_charging_pile_type t where 1=1 
    <if test="brandName != null and brandName != '' " >
        and t.brand_name LIKE CONCAT(CONCAT('%', #{brandName,jdbcType=VARCHAR}),'%') 
    </if>
  </select>
  <select id="getAll" resultMap="BaseResultMap" parameterType="java.util.Map">
    select 
    <include refid="Base_Column_List" />
    from x_charging_pile_type t where 1=1 
    <if test="brandName != null and brandName != '' " >
        and t.brand_name LIKE CONCAT(CONCAT('%', #{brandName,jdbcType=VARCHAR}),'%') 
    </if>
     order by t.create_time desc limit #{from,jdbcType=INTEGER}, #{to,jdbcType=INTEGER}
  </select>
</mapper>