<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.iber.portal.dao.enterprise.EnterpriseLevelMapper" >
  <resultMap id="BaseResultMap" type="com.iber.portal.model.enterprise.EnterpriseLevel" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="deposit_limit" property="depositLimit" jdbcType="INTEGER" />
    <result column="overdraft" property="overdraft" jdbcType="INTEGER" />
    <result column="member_deposit_limit" property="memberDepositLimit" jdbcType="INTEGER" />
    <result column="deposit_number" property="depositNumber" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, name, deposit_limit, overdraft, member_deposit_limit,deposit_number
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from x_enterprise_level
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from x_enterprise_level
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.iber.portal.model.enterprise.EnterpriseLevel" >
    insert into x_enterprise_level (id, name, deposit_limit, 
      overdraft, member_deposit_limit,deposit_number)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{depositLimit,jdbcType=INTEGER}, 
      #{overdraft,jdbcType=INTEGER}, #{memberDepositLimit,jdbcType=INTEGER},#{depositNumber})
  </insert>
  <insert id="insertSelective" parameterType="com.iber.portal.model.enterprise.EnterpriseLevel" >
    insert into x_enterprise_level
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="depositLimit != null" >
        deposit_limit,
      </if>
      <if test="overdraft != null" >
        overdraft,
      </if>
      <if test="memberDepositLimit != null" >
        member_deposit_limit,
      </if>
        <if test="depositNumber != null" >
            deposit_number,
        </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="depositLimit != null" >
        #{depositLimit,jdbcType=INTEGER},
      </if>
      <if test="overdraft != null" >
        #{overdraft,jdbcType=INTEGER},
      </if>
      <if test="memberDepositLimit != null" >
        #{memberDepositLimit,jdbcType=INTEGER},
      </if>
        <if test="depositNumber != null" >
            #{depositNumber,jdbcType=INTEGER},
        </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.iber.portal.model.enterprise.EnterpriseLevel" >
    update x_enterprise_level
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="depositLimit != null" >
        deposit_limit = #{depositLimit,jdbcType=INTEGER},
      </if>
      <if test="overdraft != null" >
        overdraft = #{overdraft,jdbcType=INTEGER},
      </if>
      <if test="memberDepositLimit != null" >
        member_deposit_limit = #{memberDepositLimit,jdbcType=INTEGER},
      </if>
        <if test="depositNumber != null" >
            deposit_number = #{depositNumber,jdbcType=INTEGER},
        </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.iber.portal.model.enterprise.EnterpriseLevel" >
    update x_enterprise_level
    set name = #{name,jdbcType=VARCHAR},
      deposit_limit = #{depositLimit,jdbcType=INTEGER},
      overdraft = #{overdraft,jdbcType=INTEGER},
      member_deposit_limit = #{memberDepositLimit,jdbcType=INTEGER},
      deposit_number = #{depositNumber}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="getAllNum" resultType="java.lang.Integer" parameterType="java.util.Map" >
     select count(1) from x_enterprise_level 
     <if test="name != null" >
        where name LIKE CONCAT(CONCAT('%', #{name,jdbcType=VARCHAR}),'%') 
     </if>
  </select>
  
  <select id="getAll" resultMap="BaseResultMap" parameterType="java.util.Map">
    select 
    <include refid="Base_Column_List" />
    from x_enterprise_level
    <if test="name != null" >
        where name LIKE CONCAT(CONCAT('%', #{name,jdbcType=VARCHAR}),'%') 
    </if>
    order by id limit #{from,jdbcType=INTEGER}, #{to,jdbcType=INTEGER}
  </select>
  
    <select id="getAllEnterpriseLevel" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from x_enterprise_level order by id
  </select>
</mapper>